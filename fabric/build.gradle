plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    runs {
        client {
            programArgs "--username", "Dev"
        }
        create("client2") {
            inherit(getByName("client"))

            name("Second Client")
            programArgs("--username", "AnotherDev")

            client()
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
    maven { url = "https://mvn.devos.one/snapshots/" } // Create Fabric, Forge Tags, Milk Lib, Registrate Fabric
    maven { url = "https://mvn.devos.one/releases" } // Porting Lib Releases
    maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
    maven {
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    } // Forge Config API Port
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    // ExposureCatalog does not depend on the Architectury API:
    // modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"
    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")
    modImplementation("io.github.mortuusars.exposure:exposure-fabric:${exposure_version}")

    include(modImplementation('me.lucko:fabric-permissions-api:0.3.1'))

    // forgeconfigapiport is needed for Exposure to run:
    modRuntimeOnly "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${forge_config_api_version}"
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    // input variables of this task:
    var replaceProperties = [
            minecraft_version    : minecraft_version,

            mod_id               : mod_id,
            mod_name             : mod_name,
            mod_version          : mod_version,
            mod_license          : mod_license,
            mod_authors          : mod_authors,
            mod_description      : mod_description,
            mod_homepage         : mod_homepage,
            mod_github           : mod_github,
    ]
    inputs.properties replaceProperties

    filesMatching("fabric.mod.json") {
        expand replaceProperties + [project: project]
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    archiveClassifier = "fabric"
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        var path = System.getenv("LOCAL_MAVEN")
        if (path != null) {
            maven {
                name = 'local'
                url = uri(path + "/maven")
            }
        }
    }
}

// https://github.com/shedaniel/unified-publishing
unifiedPublishing {
    project {
        displayName = "${mod_name} - Fabric ${minecraft_version} - ${mod_version}" // Optional, name of the file
        version = mod_version // Optional, Inferred from project by default
        changelog = "https://github.com/mortuusars/ExposureCatalog/blob/${minecraft_version}/CHANGELOG.md" // Optional, in markdown format
        releaseType = mod_release_type // Optional, use "release", "beta" or "alpha"
        gameVersions = [minecraft_version]
        gameLoaders = ["fabric", "quilt"]

        mainPublication tasks.remapJar // Declares the publicated jar

        curseforge {
            token = System.getenv("CURSEFORGE_TOKEN")
            id = mod_curseforge_project_id // Required, must be a string, ID of CurseForge project

            relations {
                depends "exposure"
            }
        }

        modrinth {
            token = System.getenv("MODRINTH_TOKEN")
            id = mod_modrinth_project_id // Required, must be a string, ID of Modrinth project

            displayName = "${mod_name} - ${mod_version}" // Optional, name of the file

            relations {
                depends "exposure"
            }
        }
    }
}
